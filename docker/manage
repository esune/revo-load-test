#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
set -e

#
# Global utility functions - START
#
function echoError (){
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoWarning (){
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

function isInstalled () {
  rtnVal=$(type "$1" >/dev/null 2>&1)
  rtnCd=$?
  if [ ${rtnCd} -ne 0 ]; then
    return 1
  else
    return 0
  fi
}

function isS2iInstalled () {
  S2I_EXE=s2i
  if ! isInstalled ${S2I_EXE}; then
    echoError "The ${S2I_EXE} executable is needed and not on your path."
    echoError "It can be downloaded from here: https://github.com/openshift/source-to-image/releases"
    echoError "Make sure you extract the binary and place it in a directory on your path."
    exit 1
  fi
}

function generateKey(){
  (
    _length=${1:-48}
    # Format can be `-base64` or `-hex`
    _format=${2:--base64}

    echo $(openssl rand ${_format} ${_length})
  )
}

function generateSeed(){
  (
    _prefix=${1}
    _seed=$(echo "${_prefix}$(generateKey 32)" | fold -w 32 | head -n 1 )
    _seed=$(echo -n "${_seed}")
    echo ${_seed}
  )
}
#
# Global utility functions - END
#
SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      logs - Display the logs from the docker compose run (ctrl-c to exit).

      start - Runs the containers.
      up - Same as start.

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.
    
      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down

EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="db issuer holder wallet api tails-server"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-api() {
  BASE_IMAGE="centos/nodejs-12-centos7"
  echo "Building issuer-kit-api image using $BASE_IMAGE as base..."
  
  ${S2I_EXE} build \
    --copy \
    '../api' \
    $BASE_IMAGE \
    'issuer-kit-api'
}

build-all() {
  build-api
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift

    # echo "arg: ${arg}"
    # echo "Remaining: ${@}"

    case "$arg" in
      *=*)
        # echo "Exporting ..."
        export "${arg}"
        ;;
      *)
        # echo "Saving for later ..."
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  # Global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-revo-load}"
  export S2I_SCRIPTS_PATH=${S2I_SCRIPTS_PATH:-/usr/libexec/s2i}
  export DEBUG=${DEBUG}
  export LOG_LEVEL=${LOG_LEVEL:-DEBUG}

  # db
  export MONGODB_ADMIN_PASSWORD=admin
  export MONGODB_USER=mongouser
  export MONGODB_PASSWORD=mongopwd
  export MONGODB_DATABASE=issuer_kit_db
  export MONGODB_PORT=27017

  # wallet
  export WALLET_HOST="wallet"
  export WALLET_PORT="5432"
  export WALLET_USER="DB_USER"
  export WALLET_PASSWORD="DB_PASSWORD"
  export WALLET_DATABASE="issuer_kit"
  export WALLET_ADMIN_PASSWORD="mysecretpassword"

  # tails-server
  export TAILS_SERVER_PORT=6543
  export TAILS_STORAGE_PATH=${STORAGE_PATH:-"/tmp/tails-files"}
  export TAILS_SERVER_URL=${TAILS_SERVER_URL:-http://$DOCKERHOST:6543}

  # issuer
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export ISSUER_WALLET_NAME="issuer"
  export ISSUER_WALLET_ENCRYPTION_KEY="issuer_key"
  export ISSUER_STORAGE_WALLET_TYPE="postgres_storage"
  export ISSUER_WALLET_SEED="issuer_0000000000000000000000000"
  export ISSUER_ADMIN_PORT=8024
  export ISSUER_WEBHOOK_PORT=8020
  export ISSUER_WEBHOOK_URL=${ISSUER_WEBHOOK_URL:-http://api:5000/webhooks}
  export ISSUER_HTTP_INTERFACE_PORT=8021
  export ISSUER_NAME="issuer-agent"
  export ISSUER_ENDPOINT=${ISSUER_ENDPOINT:-http://issuer:$ISSUER_HTTP_INTERFACE_PORT}
  export ISSUER_ADMIN_MODE="admin-insecure-mode"

  # api
  export API_PORT=5000
  export ISSUER_ADMIN_URL=${ISSUER_ADMIN_URL:-http://issuer:$ISSUER_ADMIN_PORT}
  export DB_SERVICE="db"
  export SMTP_HOST=${SMTP_HOST:-maildev}
  export SMTP_PORT=${SMTP_PORT:-25}
  export ADMIN_EMAIL=${ADMIN_EMAIL:-"noreply@example.com"}
  if [ -z "${DEV_MODE}" ]; then
    export PUBLIC_SITE_URL=http://localhost:8082
  else
    export PUBLIC_SITE_URL=http://localhost:4251
  fi
  export EMAIL_SUBJECT=${EMAIL_SUBJECT:-"Issuer Kit Invite"}

  # holder
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export HOLDER_WALLET_NAME="holder"
  export HOLDER_WALLET_ENCRYPTION_KEY="holder_key"
  export HOLDER_STORAGE_WALLET_TYPE="postgres_storage"
  export HOLDER_WALLET_SEED="holder_0000000000000000000000000"
  export HOLDER_ADMIN_PORT=8034
  export HOLDER_WEBHOOK_PORT=8030
  export HOLDER_WEBHOOK_URL=${HOLDER_WEBHOOK_URL:-""}
  export HOLDER_HTTP_INTERFACE_PORT=8031
  export HOLDER_NAME="holder-agent"
  export HOLDER_ENDPOINT=${HOLDER_ENDPOINT:-http://holder:$HOLDER_HTTP_INTERFACE_PORT}
  export HOLDER_ADMIN_MODE="admin-insecure-mode"
}

getInputParams() {
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    *)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/tob-web/.cache
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

echoError (){
  _msg=${1}
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}
# =================================================================================================================

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

_startupParams=$(getStartupParams --force-recreate $@)

case "${COMMAND}" in
  logs)
    configureEnvironment "$@"
    docker-compose logs -f
    ;;
  build)
    isS2iInstalled

    configureEnvironment "$@"

    buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^issuer-kit-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      eval "build-${buildImage}"
    else
      echoError "\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  start|start|up)    
    configureEnvironment "$@"
    docker-compose up --scale issuer=2 -d ${_startupParams} ${DEFAULT_CONTAINERS}
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment
    docker-compose stop 
    ;;
  rm|down)
    configureEnvironment
    deleteVolumes
    ;;
  *)
    usage
    ;;
esac

popd >/dev/null
